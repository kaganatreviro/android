// Generated by view binder compiler. Do not edit!
package com.example.presentation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.presentation.R;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View line1;

  @NonNull
  public final TextView tvBeverageName;

  @NonNull
  public final TextView tvCreateTime;

  @NonNull
  public final TextView tvEstablishmentName;

  @NonNull
  public final MaterialTextView tvStatus;

  private ItemOrderBinding(@NonNull ConstraintLayout rootView, @NonNull View line1,
      @NonNull TextView tvBeverageName, @NonNull TextView tvCreateTime,
      @NonNull TextView tvEstablishmentName, @NonNull MaterialTextView tvStatus) {
    this.rootView = rootView;
    this.line1 = line1;
    this.tvBeverageName = tvBeverageName;
    this.tvCreateTime = tvCreateTime;
    this.tvEstablishmentName = tvEstablishmentName;
    this.tvStatus = tvStatus;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.line1;
      View line1 = ViewBindings.findChildViewById(rootView, id);
      if (line1 == null) {
        break missingId;
      }

      id = R.id.tv_beverage_name;
      TextView tvBeverageName = ViewBindings.findChildViewById(rootView, id);
      if (tvBeverageName == null) {
        break missingId;
      }

      id = R.id.tv_create_time;
      TextView tvCreateTime = ViewBindings.findChildViewById(rootView, id);
      if (tvCreateTime == null) {
        break missingId;
      }

      id = R.id.tv_establishment_name;
      TextView tvEstablishmentName = ViewBindings.findChildViewById(rootView, id);
      if (tvEstablishmentName == null) {
        break missingId;
      }

      id = R.id.tv_status;
      MaterialTextView tvStatus = ViewBindings.findChildViewById(rootView, id);
      if (tvStatus == null) {
        break missingId;
      }

      return new ItemOrderBinding((ConstraintLayout) rootView, line1, tvBeverageName, tvCreateTime,
          tvEstablishmentName, tvStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
